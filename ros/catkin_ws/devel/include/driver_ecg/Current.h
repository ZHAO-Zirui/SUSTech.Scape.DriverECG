// Generated by gencpp from file driver_ecg/Current.msg
// DO NOT EDIT!


#ifndef DRIVER_ECG_MESSAGE_CURRENT_H
#define DRIVER_ECG_MESSAGE_CURRENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace driver_ecg
{
template <class ContainerAllocator>
struct Current_
{
  typedef Current_<ContainerAllocator> Type;

  Current_()
    : RosTime()
    , DateTime()
    , AverageHeartRate(0)
    , InstantaneousHeartRate(0)
    , Electrocardiogram()  {
    }
  Current_(const ContainerAllocator& _alloc)
    : RosTime()
    , DateTime(_alloc)
    , AverageHeartRate(0)
    , InstantaneousHeartRate(0)
    , Electrocardiogram(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _RosTime_type;
  _RosTime_type RosTime;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _DateTime_type;
  _DateTime_type DateTime;

   typedef int32_t _AverageHeartRate_type;
  _AverageHeartRate_type AverageHeartRate;

   typedef int32_t _InstantaneousHeartRate_type;
  _InstantaneousHeartRate_type InstantaneousHeartRate;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Electrocardiogram_type;
  _Electrocardiogram_type Electrocardiogram;





  typedef boost::shared_ptr< ::driver_ecg::Current_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::driver_ecg::Current_<ContainerAllocator> const> ConstPtr;

}; // struct Current_

typedef ::driver_ecg::Current_<std::allocator<void> > Current;

typedef boost::shared_ptr< ::driver_ecg::Current > CurrentPtr;
typedef boost::shared_ptr< ::driver_ecg::Current const> CurrentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::driver_ecg::Current_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::driver_ecg::Current_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::driver_ecg::Current_<ContainerAllocator1> & lhs, const ::driver_ecg::Current_<ContainerAllocator2> & rhs)
{
  return lhs.RosTime == rhs.RosTime &&
    lhs.DateTime == rhs.DateTime &&
    lhs.AverageHeartRate == rhs.AverageHeartRate &&
    lhs.InstantaneousHeartRate == rhs.InstantaneousHeartRate &&
    lhs.Electrocardiogram == rhs.Electrocardiogram;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::driver_ecg::Current_<ContainerAllocator1> & lhs, const ::driver_ecg::Current_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace driver_ecg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::driver_ecg::Current_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::driver_ecg::Current_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::driver_ecg::Current_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::driver_ecg::Current_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::driver_ecg::Current_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::driver_ecg::Current_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::driver_ecg::Current_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05b0a81def6f0a0e8d8bfe927633e4c8";
  }

  static const char* value(const ::driver_ecg::Current_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05b0a81def6f0a0eULL;
  static const uint64_t static_value2 = 0x8d8bfe927633e4c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::driver_ecg::Current_<ContainerAllocator> >
{
  static const char* value()
  {
    return "driver_ecg/Current";
  }

  static const char* value(const ::driver_ecg::Current_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::driver_ecg::Current_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time RosTime\n"
"string DateTime\n"
"int32 AverageHeartRate\n"
"int32 InstantaneousHeartRate\n"
"int32[] Electrocardiogram\n"
;
  }

  static const char* value(const ::driver_ecg::Current_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::driver_ecg::Current_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.RosTime);
      stream.next(m.DateTime);
      stream.next(m.AverageHeartRate);
      stream.next(m.InstantaneousHeartRate);
      stream.next(m.Electrocardiogram);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Current_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::driver_ecg::Current_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::driver_ecg::Current_<ContainerAllocator>& v)
  {
    s << indent << "RosTime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.RosTime);
    s << indent << "DateTime: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.DateTime);
    s << indent << "AverageHeartRate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.AverageHeartRate);
    s << indent << "InstantaneousHeartRate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.InstantaneousHeartRate);
    s << indent << "Electrocardiogram[]" << std::endl;
    for (size_t i = 0; i < v.Electrocardiogram.size(); ++i)
    {
      s << indent << "  Electrocardiogram[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Electrocardiogram[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRIVER_ECG_MESSAGE_CURRENT_H
