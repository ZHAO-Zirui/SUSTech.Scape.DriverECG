// Generated by gencpp from file driver_ecg/Electrocardiogram.msg
// DO NOT EDIT!


#ifndef DRIVER_ECG_MESSAGE_ELECTROCARDIOGRAM_H
#define DRIVER_ECG_MESSAGE_ELECTROCARDIOGRAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace driver_ecg
{
template <class ContainerAllocator>
struct Electrocardiogram_
{
  typedef Electrocardiogram_<ContainerAllocator> Type;

  Electrocardiogram_()
    : Stamp()
    , DataArray()  {
    }
  Electrocardiogram_(const ContainerAllocator& _alloc)
    : Stamp()
    , DataArray(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _Stamp_type;
  _Stamp_type Stamp;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _DataArray_type;
  _DataArray_type DataArray;





  typedef boost::shared_ptr< ::driver_ecg::Electrocardiogram_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::driver_ecg::Electrocardiogram_<ContainerAllocator> const> ConstPtr;

}; // struct Electrocardiogram_

typedef ::driver_ecg::Electrocardiogram_<std::allocator<void> > Electrocardiogram;

typedef boost::shared_ptr< ::driver_ecg::Electrocardiogram > ElectrocardiogramPtr;
typedef boost::shared_ptr< ::driver_ecg::Electrocardiogram const> ElectrocardiogramConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::driver_ecg::Electrocardiogram_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::driver_ecg::Electrocardiogram_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::driver_ecg::Electrocardiogram_<ContainerAllocator1> & lhs, const ::driver_ecg::Electrocardiogram_<ContainerAllocator2> & rhs)
{
  return lhs.Stamp == rhs.Stamp &&
    lhs.DataArray == rhs.DataArray;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::driver_ecg::Electrocardiogram_<ContainerAllocator1> & lhs, const ::driver_ecg::Electrocardiogram_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace driver_ecg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::driver_ecg::Electrocardiogram_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::driver_ecg::Electrocardiogram_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::driver_ecg::Electrocardiogram_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::driver_ecg::Electrocardiogram_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::driver_ecg::Electrocardiogram_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::driver_ecg::Electrocardiogram_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::driver_ecg::Electrocardiogram_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a9422f8764dc275e6eec28053e841aa";
  }

  static const char* value(const ::driver_ecg::Electrocardiogram_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a9422f8764dc275ULL;
  static const uint64_t static_value2 = 0xe6eec28053e841aaULL;
};

template<class ContainerAllocator>
struct DataType< ::driver_ecg::Electrocardiogram_<ContainerAllocator> >
{
  static const char* value()
  {
    return "driver_ecg/Electrocardiogram";
  }

  static const char* value(const ::driver_ecg::Electrocardiogram_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::driver_ecg::Electrocardiogram_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time Stamp\n"
"int32[] DataArray\n"
;
  }

  static const char* value(const ::driver_ecg::Electrocardiogram_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::driver_ecg::Electrocardiogram_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Stamp);
      stream.next(m.DataArray);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Electrocardiogram_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::driver_ecg::Electrocardiogram_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::driver_ecg::Electrocardiogram_<ContainerAllocator>& v)
  {
    s << indent << "Stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.Stamp);
    s << indent << "DataArray[]" << std::endl;
    for (size_t i = 0; i < v.DataArray.size(); ++i)
    {
      s << indent << "  DataArray[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.DataArray[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRIVER_ECG_MESSAGE_ELECTROCARDIOGRAM_H
